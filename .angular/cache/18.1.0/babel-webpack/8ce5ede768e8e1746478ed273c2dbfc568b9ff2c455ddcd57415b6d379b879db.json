{"ast":null,"code":"import { BehaviorSubject, catchError, throwError, tap } from 'rxjs';\nimport ips from '../../assets/Ips.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    router;\n    http;\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      if (typeof window !== 'undefined') {\n        const hostname = window.location.hostname;\n        console.log(hostname);\n        if (hostname.startsWith('100.112.') || hostname === 'localhost') {\n          this.dataUrl = this.ipData.tailScaleApiUrl;\n        } else {\n          this.dataUrl = this.ipData.localApiUrl;\n        }\n      } else {\n        this.dataUrl = this.ipData.localApiUrl;\n      }\n      this.dataUrl = this.dataUrl + ':8080/api';\n    }\n    dataUrl;\n    ipData = ips;\n    dataSubject = new BehaviorSubject([]);\n    data$ = this.dataSubject.asObservable();\n    getData(url) {\n      return this.http.get(this.dataUrl + url).pipe(tap(data => this.dataSubject.next(data)), catchError(this.handleError));\n    }\n    deleteDataId(url, id) {\n      const deleteUrl = `${this.dataUrl}${url}/${id}`;\n      return this.http.delete(deleteUrl).pipe(tap(() => this.refreshData(url)),\n      // Forzar la recarga de datos\n      catchError(this.handleError));\n    }\n    authenticateLogin(formValue) {\n      return this.http.post(`${this.dataUrl}/security/authenticate`, formValue).pipe(catchError(this.handleError));\n    }\n    modifyDataId(url, objeto, idKey = 'id') {\n      const modifyURL = this.dataUrl + url;\n      return this.http.put(modifyURL, objeto).pipe(tap(updatedObject => {\n        const currentData = this.dataSubject.getValue();\n        const index = currentData.findIndex(item => item[idKey] === updatedObject[idKey]);\n        if (index !== -1) {\n          currentData[index] = updatedObject;\n          this.dataSubject.next([...currentData]);\n        }\n      }), catchError(this.handleError));\n    }\n    refreshData(url) {\n      this.getData(url).subscribe();\n    }\n    handleError(error) {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = `Client-side error: ${error.error.message}`;\n      } else {\n        errorMessage = `Server-side error: ${error.status}\\nMessage: ${error.message}`;\n      }\n      return throwError(() => new Error(errorMessage));\n    }\n    isLogged() {\n      if (typeof window !== 'undefined') {\n        return localStorage.getItem('token_user') ? true : false;\n      }\n      return false;\n    }\n    Logout() {\n      if (typeof window !== 'undefined') {\n        localStorage.removeItem('token_user');\n        this.router.navigate(['/login']);\n      }\n    }\n    static ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}